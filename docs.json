[{"name":"Scope","comment":" Collect and infer information automatically for you\n\n\n# Adding to a module rule\n\n@docs ModuleContext, addModuleVisitors, initialModuleContext\n\n\n# Adding to a project rule\n\n@docs ProjectContext, addProjectVisitors\n@docs initialProjectContext, fromProjectToModule, fromModuleToProject, foldProjectContexts\n\n\n# Access\n\n@docs realModuleName\n\n","unions":[{"name":"ModuleContext","comment":" The context the Scope visitors will collect and store in your `moduleContext`.\n","args":[],"cases":[]},{"name":"ProjectContext","comment":" The context the Scope visitors will collect and store in your `projectContext`.\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"addModuleVisitors","comment":" Adds the scope visitors to your module rule.\n\nUsing `addModuleVisitors` requires your module context\nto be a record with a `scope : Scope.ModuleContext` field.\n\n**NOTE**: You need to use this function **before** your other visitors, otherwise\nthe scope may not be up-to-date when you access it.\n\n    rule : Rule\n    rule =\n        Rule.newModuleRuleSchema \"RuleName\" initialContext\n            -- Scope.addModuleVisitors needs to be added before your own visitors\n            |> Scope.addModuleVisitors\n            -- |> addOtherVisitors\n            |> Rule.fromModuleRuleSchema\n\n    type alias Context =\n        -- Scope expects a context with a record, containing the `scope` field.\n        { scope : Scope.ModuleContext\n\n        -- ...other fields\n        }\n\n    initialContext : Context\n    initialContext =\n        { scope = Scope.initialModuleContext\n\n        -- ...other fields\n        }\n\n","type":"Review.Rule.ModuleRuleSchema { schemaState | canCollectProjectData : () } { moduleContext | scope : Scope.ModuleContext } -> Review.Rule.ModuleRuleSchema { schemaState | canCollectProjectData : (), hasAtLeastOneVisitor : () } { moduleContext | scope : Scope.ModuleContext }"},{"name":"addProjectVisitors","comment":" Adds the scope visitors to your project rule.\n\nUsing `addProjectVisitors` requires your project context\nto be a record with a `scope : Scope.ProjectContext` field.\n\n**NOTE**: You need to use this function **before** your other visitors, otherwise\nthe scope may not be up-to-date when you access it.\n\nAdding project visitors adds a bit of wiring, but you can pretty much copy-paste\nthe code below and adapt it to your needs.\n\n    rule : Rule\n    rule =\n        Rule.newProjectRuleSchema \"RuleName\" initialProjectContext\n            |> Scope.addProjectVisitors\n            -- |> addOtherVisitors\n            |> Rule.withModuleContext\n                { fromProjectToModule = fromProjectToModule\n                , fromModuleToProject = fromModuleToProject\n                , foldProjectContexts = foldProjectContexts\n                }\n            |> Rule.fromProjectRuleSchema\n\n    type alias ProjectContext =\n        { scope : Scope.ProjectContext\n\n        -- ...other fields\n        }\n\n    type alias ModuleContext =\n        { scope : Scope.ModuleContext\n\n        -- ...other fields\n        }\n\n    initialProjectContext : ProjectContext\n    initialProjectContext =\n        { scope = Scope.initialProjectContext\n\n        -- ...other fields\n        }\n\n    fromProjectToModule : Rule.ModuleKey -> Node ModuleName -> ProjectContext -> ModuleContext\n    fromProjectToModule moduleKey moduleName projectContext =\n        { scope = Scope.fromProjectToModule projectContext.scope\n\n        -- ...other fields\n        }\n\n    fromModuleToProject : Rule.ModuleKey -> Node ModuleName -> ModuleContext -> ProjectContext\n    fromModuleToProject moduleKey moduleName moduleContext =\n        { scope = Scope.fromModuleToProject moduleName moduleContext.scope\n\n        -- ...other fields\n        }\n\n    foldProjectContexts : ProjectContext -> ProjectContext -> ProjectContext\n    foldProjectContexts newContext previousContext =\n        { scope = Scope.foldProjectContexts newContext.scope previousContext.scope\n\n        -- ...other fields\n        }\n\n","type":"Review.Rule.ProjectRuleSchema { schemaState | canAddModuleVisitor : () } { projectContext | scope : Scope.ProjectContext } { moduleContext | scope : Scope.ModuleContext } -> Review.Rule.ProjectRuleSchema { schemaState | canAddModuleVisitor : (), hasAtLeastOneVisitor : (), withModuleContext : Review.Rule.Required } { projectContext | scope : Scope.ProjectContext } { moduleContext | scope : Scope.ModuleContext }"},{"name":"foldProjectContexts","comment":" Fold `Scope.ProjectContext`s. Use this in your own `foldProjectContexts`.\n\n    foldProjectContexts : ProjectContext -> ProjectContext -> ProjectContext\n    foldProjectContexts newContext previousContext =\n        { scope = Scope.foldProjectContexts newContext.scope previousContext.scope\n\n        -- ...other fields\n        }\n\n","type":"Scope.ProjectContext -> Scope.ProjectContext -> Scope.ProjectContext"},{"name":"fromModuleToProject","comment":" Get a `Scope.ProjectContext` from a `Scope.ModuleContext`. Use this in your own\n`fromModuleToProject`.\n\n    fromModuleToProject : Rule.ModuleKey -> Node ModuleName -> ModuleContext -> ProjectContext\n    fromModuleToProject moduleKey moduleName moduleContext =\n        { scope = Scope.fromModuleToProject moduleName moduleContext.scope\n\n        -- ...other fields\n        }\n\n","type":"Elm.Syntax.Node.Node Elm.Syntax.ModuleName.ModuleName -> Scope.ModuleContext -> Scope.ProjectContext"},{"name":"fromProjectToModule","comment":" Get a `Scope.ModuleContext` from a `Scope.ProjectContext`. Use this in your own\n`fromProjectToModule`.\n\n    fromProjectToModule : Rule.ModuleKey -> Node ModuleName -> ProjectContext -> ModuleContext\n    fromProjectToModule moduleKey moduleName projectContext =\n        { scope = Scope.fromProjectToModule projectContext.scope\n\n        -- ...other fields\n        }\n\n","type":"Scope.ProjectContext -> Scope.ModuleContext"},{"name":"initialModuleContext","comment":" Create an initial `moduleContext` for the scope for module rules. Use this value when\ninitializing the scope inside your `initialModuleContext`.\n\nUsing [`Scope.addModuleVisitors`](#addModuleVisitors) requires your module context\nto be a record with a `scope : Scope.ModuleContext` field.\n\n    type alias ModuleContext =\n        { scope : Scope.ModuleContext\n\n        -- ...other fields\n        }\n\n    initialModuleContext : ModuleContext\n    initialModuleContext =\n        { scope = Scope.initialModuleContext\n\n        -- ...other fields\n        }\n\n**NOTE**: If you are building a project rule, don't use this value inside your\n`fromProjectToModule` function. Instead, use [`Scope.fromProjectToModule`](#fromProjectToModule).\n\n","type":"Scope.ModuleContext"},{"name":"initialProjectContext","comment":" Create an initial `projectContext` for the scope for project rules. Use this value when\ninitializing the scope inside your `initialProjectContext`.\n\nUsing [`Scope.addProjectVisitors`](#addProjectVisitors) requires your project context\nto be a record with a `scope : Scope.ProjectContext` field.\n\nLook at the [`Scope.addProjectVisitors`](#addProjectVisitors) example for the\nwiring logic related to `withModuleContext` that you can copy-paste then adapt to your needs.\n\n    type alias ProjectContext =\n        { scope : Scope.ProjectContext\n\n        -- ...other fields\n        }\n\n    initialProjectContext : ProjectContext\n    initialProjectContext =\n        { scope = Scope.initialProjectContext\n        , otherFields = ()\n        }\n\n","type":"Scope.ProjectContext"},{"name":"realModuleName","comment":" TODO\n","type":"Scope.ModuleContext -> String.String -> List.List String.String -> List.List String.String"}],"binops":[]}]